/*
 * Copyright (c) 2016 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== package.bld ========
 */

var Build = xdc.useModule('xdc.bld.BuildEnvironment');
var Pkg = xdc.useModule('xdc.bld.PackageContents');

Pkg.makePrologue = 'TREE_ROOT = ../../..\n';
Pkg.makePrologue += 'include ../../../products.mak\n';

Pkg.attrs.exportSrc = true;
Pkg.generatedFiles.$add("lib/");

Pkg.otherFiles = [ "hal_defs.h", "hal_types.h", "npi_data.h", "npi_task.h",
                   "npi_tl.h", "npi_tl_uart.h", "npi_util.h", "package.bld" ];

var SRCS = [
//    "npi_tl.c",
    "npi_util.c",
    "npi_task.c",
//    "npi_tl_uart_m.c",

    //todo - icall dependency needs removed
    //"npi_tl_spi.c",

];

var cc26xx_srcs = SRCS.concat(["npi_tl_cc26xx.c", "npi_tl_uart_m_cc26xx.c"]);
var msp432_srcs = SRCS.concat(["npi_tl_msp432.c", "npi_tl_uart_m_msp432.c"]);

var cc26xxInc = " -I$(CC26XXWARE_INSTALL_DIR)/driverlib " +
        "-I$(CC26XXWARE_INSTALL_DIR)";

var msp432Inc = " -I$(MSP432_DRIVERLIB_INSTALL_DIR)/driverlib/MSP432P4xx/ " +
        " -I$(MSP432_DRIVERLIB_INSTALL_DIR)/inc " +
        " -I$(MSP432_DRIVERLIB_INSTALL_DIR)/inc/CMSIS/ " +
        "-I$(MSP432_DRIVERLIB_INSTALL_DIR)";

for (var i = 0; i < Build.targets.length; i++) {
    var target = Build.targets[i];

    /* TODO - need a better way to set this flag */
    var cc26xxPkg = (target.suffix == "em3");

    for (var profile in target.profiles) {
        if (target.suffix == "em3") {
            /* build M3 libs exclusively for cc26xx */
            Pkg.addLibrary("lib/" + profile + "/npi_uart_pm_cc26xx", target, {
                profile: profile,
                incs: cc26xxInc,
                defs: "-DNPI_USE_UART -DNPI_MASTER -DPOWER_SAVING"
            }).addObjects(cc26xx_srcs);

            Pkg.addLibrary("lib/" + profile + "/npi_uart_cc26xx", target, {
                profile: profile,
                incs: cc26xxInc,
                defs: "-DNPI_USE_UART -DNPI_MASTER"
            }).addObjects(cc26xx_srcs);

            Pkg.addLibrary("lib/" + profile + "/npi_spi_pm_cc26xx", target, {
                profile: profile,
                incs: cc26xxInc,
                defs: "-DNPI_USE_SPI -DNPI_MASTER -DPOWER_SAVING"
            }).addObjects(cc26xx_srcs);
            Pkg.addLibrary("lib/" + profile + "/npi_spi_cc26xx", target, {
                profile: profile,
                incs: cc26xxInc,
                defs: "-DNPI_USE_SPI -DNPI_MASTER"
            }).addObjects(cc26xx_srcs);
        }
        else if (target.suffix == "em4f") {
            /* build M4F libs exclusively for msp432 */
            Pkg.addLibrary("lib/" + profile + "/npi_uart_pm_msp432", target, {
                profile: profile,
                incs: msp432Inc,
                defs: "-DNPI_USE_UART -DNPI_MASTER -DPOWER_SAVING -D__MSP432P401R__"
            }).addObjects(msp432_srcs);

            Pkg.addLibrary("lib/" + profile + "/npi_uart_msp432", target, {
                profile: profile,
                incs: msp432Inc,
                defs: "-DNPI_USE_UART -DNPI_MASTER -D__MSP432P401R__"
            }).addObjects(msp432_srcs);

            Pkg.addLibrary("lib/" + profile + "/npi_spi_pm_msp432", target, {
                profile: profile,
                incs: msp432Inc,
                defs: "-DNPI_USE_SPI -DNPI_MASTER -DPOWER_SAVING -D__MSP432P401R__"
            }).addObjects(msp432_srcs);
            Pkg.addLibrary("lib/" + profile + "/npi_spi_msp432", target, {
                profile: profile,
                incs: msp432Inc,
                defs: "-DNPI_USE_SPI -DNPI_MASTER -D__MSP432P401R__"
            }).addObjects(msp432_srcs);
        }
    }
}
